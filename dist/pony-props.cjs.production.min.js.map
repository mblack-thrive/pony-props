{"version":3,"file":"pony-props.cjs.production.min.js","sources":["../src/use-pony/usePony.interface.ts","../src/use-pony/utils/get-flex-order.ts","../src/use-pony/usePony.state.ts","../src/use-pony/usePony.ts"],"sourcesContent":["export enum ActionKind {\n  Next = 'Next',\n  Previous = 'Previous',\n  Reset = 'Reset',\n  UpdateOrder = 'UpdateOrder',\n  AnimationComplete = 'AnimationComplete',\n}\n\nexport type State = {\n  activeSlideIndex: number;\n  slideDirection: ActionKind;\n  order: number[];\n  animating: boolean;\n};\n\nexport type Action = {\n  type: ActionKind;\n  payload: {\n    numItems: number;\n    activeSlideIndex?: number;\n  };\n};\n","/**\n * Gets the flex order for a slide.\n * @param index - the index of the slide\n * @param activeSlideIndex - the current/visible slide index\n * @param numItems - number of slides in carousel\n * @returns the flex order for a carousel item\n */\nexport const getOrder = ({\n  index,\n  activeSlideIndex,\n  numItems,\n}: Record<'index' | 'activeSlideIndex' | 'numItems', number>) =>\n  index - activeSlideIndex < 0\n    ? numItems - Math.abs(index - activeSlideIndex)\n    : index - activeSlideIndex;\n","import { Action, ActionKind, State } from './usePony.interface';\nimport { getOrder } from './utils/get-flex-order';\n\nexport const initialState: State = {\n  activeSlideIndex: 0,\n  slideDirection: ActionKind.Reset,\n  order: [],\n  animating: false,\n};\n\nexport const reducer = (prevState: State, action: Action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case ActionKind.Reset:\n      return initialState;\n    case ActionKind.Previous:\n      const isFirstIndex = prevState.activeSlideIndex === 0;\n      return {\n        ...prevState,\n        slideDirection: ActionKind.Previous,\n        activeSlideIndex: isFirstIndex\n          ? payload?.numItems - 1\n          : prevState.activeSlideIndex - 1,\n        animating: true,\n      };\n    case ActionKind.Next:\n      const isLastIndex = prevState.activeSlideIndex === payload.numItems - 1;\n      return {\n        ...prevState,\n        slideDirection: ActionKind.Next,\n        activeSlideIndex: isLastIndex ? 0 : prevState.activeSlideIndex + 1,\n        animating: true,\n      };\n    case ActionKind.UpdateOrder:\n      return {\n        ...prevState,\n        order: (Array.apply(null, Array(payload?.numItems)).map((_, i) => getOrder({\n          index: i,\n          activeSlideIndex: payload?.activeSlideIndex || prevState.activeSlideIndex,\n          numItems: payload?.numItems,\n        }))),\n      };\n    case ActionKind.AnimationComplete:\n      return {\n        ...prevState,\n        animating: false,\n      };\n    default:\n      return prevState;\n  }\n};\n","import {\n  CSSProperties,\n  useReducer,\n  useState,\n  AriaAttributes,\n  useEffect,\n  useRef,\n} from 'react';\nimport { ActionKind } from './usePony.interface';\nimport { initialState, reducer } from './usePony.state';\nimport { getOrder } from './utils/get-flex-order';\n\n// TODO: readme\n\nexport const usePony = ({\n  numItems,\n  initialActiveSlideIndex = initialState.activeSlideIndex,\n  isAnnouncerVisible = false,\n  reduceMotion = false,\n  transitionDuration = 500,\n  onInit,\n  onAfterChange,\n}: {\n  numItems: number;\n  initialActiveSlideIndex?: number;\n  isAnnouncerVisible?: boolean;\n  reduceMotion?: boolean;\n  transitionDuration?: number;\n  onInit?(): void;\n  onAfterChange?(activeIndex: number): void;\n}) => {\n  const [state, dispatch] = useReducer(reducer, {\n    ...initialState,\n    activeSlideIndex: initialActiveSlideIndex,\n    order: (Array.apply(null, Array(numItems)).map((_, i) => getOrder({\n      index: i,\n      activeSlideIndex: initialActiveSlideIndex,\n      numItems,\n    })))\n  });\n  const sectionRef = useRef<HTMLDivElement>(null);\n  const headingRef = useRef<HTMLHeadingElement>(null);\n  const carouselWrapperRef = useRef<HTMLDivElement>(null);\n  const carouselRef = useRef<HTMLUListElement>(null);\n  const carouselItemRef = useRef<HTMLLIElement>(null);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const announcerRef = useRef<HTMLDivElement>(null);\n  const TRANSITION_DURATION_MS = reduceMotion ? 0 : transitionDuration;\n\n  const [currentSwipeDirection, setCurrentSwipeDirection] = useState<\n    ActionKind.Previous | ActionKind.Next | null\n  >(null);\n\n  useEffect(() => {\n    if (onInit) {\n      onInit();\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!sectionRef.current) {\n      throw new Error('please apply getSectionProps() to your <section>');\n    }\n    if (!headingRef.current) {\n      throw new Error('please apply getHeadingProps() to your <h{1,2,3}>');\n    }\n    if (!carouselWrapperRef.current) {\n      throw new Error('please apply getCarouselWrapperProps() to your <div>');\n    }\n    if (!carouselRef.current) {\n      throw new Error('please apply getCarouselProps() to your <ul>');\n    }\n    if (!carouselItemRef.current) {\n      throw new Error('please apply getCarouselItemProps() to your <li>');\n    }\n    if (!buttonRef.current) {\n      throw new Error('please apply getButtonProps() to your <button>');\n    }\n    if (!announcerRef.current) {\n      throw new Error('please apply getAnnouncerProps() to your <div>');\n    }\n  }, [\n    sectionRef,\n    headingRef,\n    carouselWrapperRef,\n    carouselRef,\n    carouselItemRef,\n    buttonRef,\n    announcerRef,\n  ]);\n\n  useEffect(() => {\n    // Listen for swipe direction changes. Apply appropriate translateX transition.\n    if (currentSwipeDirection) {\n      const transformArray = [\n        { transform: 'translateX(-100%)' },\n        { transform: 'translateX(0px)' },\n      ];\n\n      carouselRef?.current?.animate(\n        currentSwipeDirection === ActionKind.Previous\n          ? transformArray\n          : transformArray.reverse(),\n        {\n          easing: 'ease-in',\n          duration: TRANSITION_DURATION_MS,\n        }\n      );\n\n      if (currentSwipeDirection === ActionKind.Previous) {\n        dispatch({ type: ActionKind.UpdateOrder, payload: {\n          numItems,\n          activeSlideIndex: state.activeSlideIndex,\n        }});\n      }\n\n      // Automatically focus on new active carousel slide for a11y reasons.\n      setTimeout(() => {\n        dispatch({ type: ActionKind.AnimationComplete, payload: {\n          numItems,\n        }});\n\n        if (currentSwipeDirection === ActionKind.Next) {\n          dispatch({ type: ActionKind.UpdateOrder, payload: {\n            numItems,\n            activeSlideIndex: state.activeSlideIndex,\n          }});\n        }\n        onAfterChange && onAfterChange(state.activeSlideIndex);\n        // document.getElementById('carousel-item-active')?.focus();\n      }, TRANSITION_DURATION_MS);\n    }\n  }, [state.activeSlideIndex, currentSwipeDirection, numItems]);\n\n  const slide = (slideDirection: ActionKind.Previous | ActionKind.Next) => {\n    if (!state.animating) {\n      setCurrentSwipeDirection(slideDirection);\n      dispatch({ type: slideDirection, payload: { numItems } });\n    }\n  };\n\n  const getSectionProps = () => ({\n    ref: sectionRef,\n    as: 'section',\n    'aria-labelledby': 'carousel-heading',\n    // 'aria-roledescription': 'carousel',\n  });\n\n  const getHeadingProps = () => ({\n    ref: headingRef,\n    id: 'carousel-heading',\n  });\n\n  const getCarouselWrapperProps = () => ({\n    ref: carouselWrapperRef,\n    style: { width: '100%', overflow: 'hidden' },\n  });\n\n  const getCarouselProps = () => ({\n    ref: carouselRef,\n    // 'aria-label': 'Slides',\n    style: {\n      display: 'flex',\n    },\n  });\n\n  const getCarouselItemProps = (index: number) => ({\n    ref: carouselItemRef,\n    id: `carousel-item-${\n      index === state.activeSlideIndex ? 'active' : index\n    }`,\n    // 'aria-roledescription': 'slide',\n    'aria-label': `${index + 1} of ${numItems}`,\n    'aria-current': index === state.activeSlideIndex,\n    // 'aria-hidden': index !== state.activeSlideIndex,\n    style: {\n      order: state.order[index],\n      // getOrder({\n      //   index,\n      //   activeSlideIndex: state.activeSlideIndex,\n      //   numItems,\n      // }),\n      display: 'flex',\n      flex: '1 0 100%',\n      flexBasis: '100%',\n      transition: 'none',\n        // Only apply this transition when the current swipe direction is next\n        // This ensures the re-ordering of items is smoother.\n        // currentSwipeDirection === ActionKind.Next\n        //   ? `order ${TRANSITION_DURATION_MS / 1000 + 0.1}s ease-in`\n        //   : 'none',\n    },\n  });\n\n  const getButtonProps = (\n    direction: ActionKind.Previous | ActionKind.Next\n  ) => ({\n    ref: buttonRef,\n    'aria-label': direction === ActionKind.Previous ? 'Previous' : 'Next',\n    onClick: () => slide(direction),\n  });\n\n  const getAnnouncerProps = () => ({\n    ref: announcerRef,\n    'aria-live': 'polite' as AriaAttributes['aria-live'],\n    'aria-atomic': 'true' as AriaAttributes['aria-atomic'],\n    style: isAnnouncerVisible\n      ? {}\n      : ({\n          clip: 'rect(0 0 0 0)',\n          clipPath: 'inset(50%)',\n          height: '1px',\n          overflow: 'hidden',\n          position: 'absolute',\n          whiteSpace: 'nowrap',\n          width: '1px',\n        } as CSSProperties),\n  });\n\n  return {\n    // prop getters.\n    getSectionProps,\n    getHeadingProps,\n    getCarouselWrapperProps,\n    getCarouselProps,\n    getCarouselItemProps,\n    getButtonProps,\n    getAnnouncerProps,\n    // state.\n    state: {\n      ...state,\n      currentSwipeDirection,\n    },\n  };\n};\n"],"names":["ActionKind","getOrder","index","activeSlideIndex","numItems","Math","abs","initialState","slideDirection","Reset","order","animating","reducer","prevState","action","payload","type","Previous","Next","UpdateOrder","Array","apply","map","_","i","AnimationComplete","initialActiveSlideIndex","isAnnouncerVisible","reduceMotion","transitionDuration","onInit","onAfterChange","useReducer","state","dispatch","sectionRef","useRef","headingRef","carouselWrapperRef","carouselRef","carouselItemRef","buttonRef","announcerRef","TRANSITION_DURATION_MS","useState","currentSwipeDirection","setCurrentSwipeDirection","useEffect","current","Error","transformArray","transform","animate","reverse","easing","duration","setTimeout","getSectionProps","ref","as","getHeadingProps","id","getCarouselWrapperProps","style","width","overflow","getCarouselProps","display","getCarouselItemProps","flex","flexBasis","transition","getButtonProps","direction","onClick","getAnnouncerProps","clip","clipPath","height","position","whiteSpace"],"mappings":"wEAAYA,qOAAAA,EAAAA,qBAAAA,oCAEVA,sBACAA,gBACAA,4BACAA,wCCEK,IAAMC,EAAW,gBACtBC,IAAAA,MACAC,IAAAA,wBAGAD,EAAQC,EAAmB,IAF3BC,SAGeC,KAAKC,IAAIJ,EAAQC,GAC5BD,EAAQC,GCXDI,EAAsB,CACjCJ,iBAAkB,EAClBK,eAAgBR,mBAAWS,MAC3BC,MAAO,GACPC,WAAW,GAGAC,EAAU,SAACC,EAAkBC,OAC1BC,EAAYD,EAAZC,eAAYD,EAAlBE,WAGDhB,mBAAWS,aACPF,OACJP,mBAAWiB,qBAGTJ,GACHL,eAAgBR,mBAAWiB,SAC3Bd,iBAJkD,IAA/BU,EAAUV,wBAKzBY,SAAAA,EAASX,UAAW,EACpBS,EAAUV,iBAAmB,EACjCQ,WAAW,SAEVX,mBAAWkB,iBAGTL,GACHL,eAAgBR,mBAAWkB,KAC3Bf,iBAJkBU,EAAUV,mBAAqBY,EAAQX,SAAW,EAIpC,EAAIS,EAAUV,iBAAmB,EACjEQ,WAAW,SAEVX,mBAAWmB,wBAETN,GACHH,MAAQU,MAAMC,MAAM,KAAMD,YAAML,SAAAA,EAASX,WAAWkB,KAAI,SAACC,EAAGC,UAAMvB,EAAS,CACzEC,MAAOsB,EACPrB,wBAAkBY,SAAAA,EAASZ,mBAAoBU,EAAUV,iBACzDC,eAAUW,SAAAA,EAASX,qBAGpBJ,mBAAWyB,8BAETZ,GACHF,WAAW,mBAGNE,oBCnCU,gBACrBT,IAAAA,aACAsB,wBAAAA,aAA0BnB,EAAaJ,uBACvCwB,mBAAAA,oBACAC,aAAAA,oBACAC,mBAAAA,aAAqB,MACrBC,IAAAA,OACAC,IAAAA,gBAU0BC,aAAWpB,OAChCL,GACHJ,iBAAkBuB,EAClBhB,MAAQU,MAAMC,MAAM,KAAMD,MAAMhB,IAAWkB,KAAI,SAACC,EAAGC,UAAMvB,EAAS,CAChEC,MAAOsB,EACPrB,iBAAkBuB,EAClBtB,SAAAA,UANG6B,OAAOC,OASRC,EAAaC,SAAuB,MACpCC,EAAaD,SAA2B,MACxCE,EAAqBF,SAAuB,MAC5CG,EAAcH,SAAyB,MACvCI,EAAkBJ,SAAsB,MACxCK,EAAYL,SAA0B,MACtCM,EAAeN,SAAuB,MACtCO,EAAyBf,EAAe,EAAIC,IAEQe,WAExD,MAFKC,OAAuBC,cAI9BC,aAAU,WACJjB,GACFA,MAED,IAEHiB,aAAU,eACHZ,EAAWa,cACR,IAAIC,MAAM,wDAEbZ,EAAWW,cACR,IAAIC,MAAM,yDAEbX,EAAmBU,cAChB,IAAIC,MAAM,4DAEbV,EAAYS,cACT,IAAIC,MAAM,oDAEbT,EAAgBQ,cACb,IAAIC,MAAM,wDAEbR,EAAUO,cACP,IAAIC,MAAM,sDAEbP,EAAaM,cACV,IAAIC,MAAM,oDAEjB,CACDd,EACAE,EACAC,EACAC,EACAC,EACAC,EACAC,IAGFK,aAAU,cAEJF,EAAuB,OACnBK,EAAiB,CACrB,CAAEC,UAAW,qBACb,CAAEA,UAAW,0BAGfZ,YAAAA,EAAaS,YAASI,QACpBP,IAA0B7C,mBAAWiB,SACjCiC,EACAA,EAAeG,UACnB,CACEC,OAAQ,UACRC,SAAUZ,IAIVE,IAA0B7C,mBAAWiB,UACvCiB,EAAS,CAAElB,KAAMhB,mBAAWmB,YAAaJ,QAAS,CAChDX,SAAAA,EACAD,iBAAkB8B,EAAM9B,oBAK5BqD,YAAW,WACTtB,EAAS,CAAElB,KAAMhB,mBAAWyB,kBAAmBV,QAAS,CACtDX,SAAAA,KAGEyC,IAA0B7C,mBAAWkB,MACvCgB,EAAS,CAAElB,KAAMhB,mBAAWmB,YAAaJ,QAAS,CAChDX,SAAAA,EACAD,iBAAkB8B,EAAM9B,oBAG5B4B,GAAiBA,EAAcE,EAAM9B,oBAEpCwC,MAEJ,CAACV,EAAM9B,iBAAkB0C,EAAuBzC,IAuF5C,CAELqD,gBAhFsB,iBAAO,CAC7BC,IAAKvB,EACLwB,GAAI,4BACe,qBA8EnBC,gBA1EsB,iBAAO,CAC7BF,IAAKrB,EACLwB,GAAI,qBAyEJC,wBAtE8B,iBAAO,CACrCJ,IAAKpB,EACLyB,MAAO,CAAEC,MAAO,OAAQC,SAAU,YAqElCC,iBAlEuB,iBAAO,CAC9BR,IAAKnB,EAELwB,MAAO,CACLI,QAAS,UA+DXC,qBA3D2B,SAAClE,SAAmB,CAC/CwD,IAAKlB,EACLqB,qBACE3D,IAAU+B,EAAM9B,iBAAmB,SAAWD,gBAG/BA,EAAQ,SAAQE,iBACjBF,IAAU+B,EAAM9B,iBAEhC4D,MAAO,CACLrD,MAAOuB,EAAMvB,MAAMR,GAMnBiE,QAAS,OACTE,KAAM,WACNC,UAAW,OACXC,WAAY,UAyCdC,eAhCqB,SACrBC,SACI,CACJf,IAAKjB,eACSgC,IAAczE,mBAAWiB,SAAW,WAAa,OAC/DyD,QAAS,kBAjEIlE,EAiEQiE,OAhEhBxC,EAAMtB,YACTmC,EAAyBtC,GACzB0B,EAAS,CAAElB,KAAMR,EAAgBO,QAAS,CAAEX,SAAAA,OAHlC,IAACI,KA6FbmE,kBAzBwB,iBAAO,CAC/BjB,IAAKhB,cACQ,uBACE,OACfqB,MAAOpC,EACH,GACC,CACCiD,KAAM,gBACNC,SAAU,aACVC,OAAQ,MACRb,SAAU,SACVc,SAAU,WACVC,WAAY,SACZhB,MAAO,SAcb/B,WACKA,GACHY,sBAAAA"}